@using System.Web.Script.Serialization;
@model KnockOutJsMvcCreateArticle.Models.Author


<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<div id="EditAuthorForm">
    @using (Ajax.BeginForm("AjaxEditAuthor", "Author", new AjaxOptions { UpdateTargetId = "EditAuthorForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <fieldset>
            <legend>Author</legend>

            @Html.HiddenFor(model => model.Id)

            <div class="editor-label">
                @Html.LabelFor(model => model.FirstName)

            </div>
            <div class="editor-field">
                @* @Html.EditorFor(model => model.FirstName)*@
                @Html.TextBoxFor(model => model.FirstName, new { data_bind = "value: FirstName" })
                @Html.ValidationMessageFor(model => model.FirstName)
                <span data-bind="text: FirstName"> </span>
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.LastName)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Biography)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Biography)
                @Html.ValidationMessageFor(model => model.Biography)
            </div>

            <p>
                <input type="submit" value="Save" />
            </p>
        </fieldset>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>



   <script type="text/javascript">
       alert("inside the script");
    var initialData =   @Html.Raw( new JavaScriptSerializer().Serialize(Model));

       var ViewModel = function (data) {
           var self = this;
           ko.mapping.fromJS(data, {}, self);
       }

       ko.applyBindings(new ViewModel(initialData));

</script>


